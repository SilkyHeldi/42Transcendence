// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Player from 42
model User {
  id             Int           @id @default(autoincrement())
  username       String?       @unique
  email          String        @unique
  password       String
  avatar         String        @default("/avatars/default.jpg") //the path to the avatar image
  isSetup        Boolean       @default(false) //if the user has setup his account
  mfaSecret      String?       // Field to store the 2FA secret
  mfaEnabled       Boolean           @default(false)

  friends Friendship[] @relation("friends")
  friendsOf  Friendship[] @relation("friendsOf")

  points    Int           @default(1000) //level for stats
  victories      Int           @default(0) //number of victories for stats
  defeats        Int           @default(0) //number of defeats for stats
  
  games          Game[]        @relation("games")

  blockedUsers   BlockedUser[] @relation("blocked")

  status         String?       @default("OFFLINE")//online, playing, offline
  // friends        Friend[]      @relation("friends")
  // inverseFriends Friend[]      @relation("inverseFriends") // Only for prisma, not used
  wonGames       GameHistory[]        @relation("winner")
  lostGames      GameHistory[]        @relation("loser")
  channels       ChannelUser[] //channels the user is in
//  history        history[]    //history of DMs, and maybe channels soon
  gameLobby      GameLobby[]   
//  messages       Message[]     @relation("sender")
  socketId       String        @default("") //socket id for the user
  queue          Queue?        // Define the Queue relation here
  twoFa           Int          @default(0) //'on' = 1  or 'off' = 0
  secret         String?       // Field to store the 2FA secret
}

//Blocked list
model BlockedUser {
  userId    Int
  user      User @relation("blocked", fields: [userId], references: [id])
  blockedId Int

  @@id([userId, blockedId])
}
//Chat channel
model Channel {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  type         ChannelType //public, private, protected or dm
  password     String? //if access is defined as protected
  users        ChannelUser[] //users in the channel
  messages     Message[]//messages in the channel 
  creationDate DateTime      @default(now())
}

//Message content
model Message {
  id          Int       @id @default(autoincrement())
  content     String
  from    Int
  channelId   Int
  channel     Channel  @relation(fields: [channelId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  timestamp        DateTime  @default(now())

}

model ChannelUser {
  role        Role
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  channelId   Int
  channel     Channel   @relation(fields: [channelId], references: [id])
  bannedUntil DateTime? //if banned
  mutedUntil  DateTime? //if muted

  @@id([userId, channelId])
}

//User role in a channel
enum Role {
  USER
  ADMIN
  OWNER
}

//Channel accessibility
enum ChannelType {
  DM
  PUBLIC
  PRIVATE
  PROTECTED
}

model Friendship {
  from   User @relation("friends", fields: [fromId], references: [id])
  fromId Int
  to    User @relation("friendsOf", fields: [toId], references: [id])
  toId  Int
  accepted  Boolean @default(false)
  channelId Int?

  @@id([fromId, toId])
}


model GameLobby {
  id              Int      @id @default(autoincrement())
  lobbyId         String   @unique
  players         User[]    
  playerOneScore  String
  playerTwoScore  String
}

model Queue {
  id         Int      @id @default(autoincrement())
  confirmed  String   @default("idle")
  username   String   @unique
  profile    User     @relation(fields: [username], references: [username])
}



//Game of Pong
model Game {
    id          String      @id @default(uuid())
    players     User[]      @relation("games")
    state       Json     @default("{}") //waiting, playing, finished
    //leftId      Int
    //rightId     Int
    //leftScore   Int
    //rightScore  Int
    date        DateTime @default(now())
}
model GameHistory {
  id          String      @id @default(uuid())
  winnerId    Int
  winner      User     @relation("winner", fields: [winnerId], references: [id])
  winnerScore Int
  loserId     Int
  loser       User     @relation("loser", fields: [loserId], references: [id])
  loserScore  Int
  date        DateTime @default(now())
}
